<!DOCTYPE html>
<html>
<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<meta http-equiv="expires" content="0">
<meta http-equiv="cache-control" content="no-cache, no-store, must-revalidate" />
<meta http-equiv="pragma" content="no-cache" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Aircraft Panel</title>
<link rel="shortcut icon" href="./favicon.ico" type="image/x-icon">
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/css/bootstrap.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/js/bootstrap.bundle.min.js"></script>

<link type="text/css" href="common.css" rel="stylesheet" />

<!-- Source: https://medium.com/@jamesweee/using-vue-js-single-file-component-without-module-bundlers-aea58d892ad9 -->
<!-- Alternative idea: https://dev.to/arswaw/create-a-lightweight-componentized-spa-without-node-569j -->
<!-- React (but lacks scoped CSS): https://stackoverflow.com/questions/36511100/how-do-i-use-react-js-without-a-bundler -->

<script type="module">
import * as Vue from 'https://unpkg.com/vue@3/dist/vue.runtime.esm-browser.js';
import { loadModule } from 'https://cdn.jsdelivr.net/npm/vue3-sfc-loader@0.8.4/dist/vue3-sfc-loader.esm.js';
import Common from './Common.js';
import Fsuipc from './Fsuipc.js';
import FsuipcConnection from './FsuipcConnection.js';
import FsuipcHtml from './FsuipcHtml.js';

var Config, UserFsuipc, UserFsuipcHtml;

await import('./user-config/Config.js?_='+ new Date().getTime())
	.then(module => Config = module.Config)
	.catch(() => console.log('Config not found, skipped'));

await import('./user-config/UserFsuipc.js?_='+ new Date().getTime())
	.then(module => UserFsuipc = module.default)
	.catch(() => console.log('UserFsuipc not found, skipped'));

await import('./user-config/UserFsuipcHtml.js?_='+ new Date().getTime())
	.then(module => UserFsuipcHtml = module.default)
	.catch(() => console.log('UserFsuipcHtml not found, skipped'));


var offsetMap = Fsuipc.map();
var lVarOptions = Fsuipc.lVarOptions();
var presetCommands = Fsuipc.presetCommands();
var userOffsetMap, userLVarOptions, userPresetCommands;
if (UserFsuipc) {
	if (typeof UserFsuipc.map !== 'undefined') {
		offsetMap = { ...UserFsuipc.map(), ...offsetMap };
	}
	if (typeof UserFsuipc.lVarOptions !== 'undefined') {
		lVarOptions = { ...UserFsuipc.lVarOptions(), ...lVarOptions };
	}
	if (typeof UserFsuipc.presetCommands !== 'undefined') {
		presetCommands = { ...UserFsuipc.presetCommands(), ...presetCommands };
	}
}

var debug = true;
var connection;
var simControls = null;
var storedPanelConfig = {};  //for holding panel specific configuration

var audioObj = document.createElement('audio');
audioObj.src = 'media/one-click.wav';
audioObj.volume = 0.10;
audioObj.autoPlay = false;
audioObj.preLoad = true;

var urlParams = new URLSearchParams(window.location.search);
if (!urlParams.has('config')) {
	location.href = 'start.htm';
} else {
	var aircraftPanelId = urlParams.get('config');

	const dataStore = {  //idea: https://v3.vuejs.org/guide/state-management.html#simple-state-management-from-scratch (alternative ideas: https://blog.logrocket.com/provide-inject-vue-js-3-composition-api/ --- https://stackoverflow.com/questions/64040286/access-this-root-in-vue-js-3-setup)
		debug: false,

		appConfig: Config,

		state: Vue.reactive({}),

		setStoreValue(method, refName, internalValue, valueHtml) {
			if (this.debug) {
				console.log('setStoreValue triggered with', method, refName, ':', valueHtml);
			}

			if (typeof this.state[method] === 'undefined') {
				this.state[method] = {
					[refName]: {internalValue, valueHtml}  // source: https://stackoverflow.com/questions/1184123/is-it-possible-to-add-dynamically-named-properties-to-javascript-object
				}
			} else {
				this.state[method][refName] = {internalValue, valueHtml};
			}
		},
	}

	// Other ideas for event handling:
	//   https://v3.vuejs.org/guide/component-basics.html#emitting-a-value-with-an-event
	//   https://v3.vuejs.org/guide/events.html#method-event-handlers
	// Accessing child component data values and methods
	//   https://forum.vuejs.org/t/vue3-accessing-child-component-data-values-and-methods/111329/4
	// Declaring props dynamically
	//   https://vuetiful.wordpress.com/2017/03/12/passing-dynamically-declared-props-in-vue-js/

	/**
	 * @param {object} event The Javascript event
	 * @param {object} options : Available options (either currInternalValue or newInternalValue must be set):
	 *   - `currInternalValue` : set this for toggling states, otherwise set it as undefined
	 *   - `newInternalValue` : set this to set a specific value, otherwise set it as undefined
	 *   - `sound` : set false to not play any clicking sound
	 */
	const eventHandlers = {
		singleClick: (event, method, refName, currInternalValue, newInternalValue, options) => {
			console.log('Single click: '+ method +':'+ JSON.stringify(refName));
			if (!options) options = {};

			if (options.defectWrite) return false;

			// Play sound
			if (options.sound !== false) {
				audioObj.play();
			}

			// Handle click
			var newValue, offsetsData, inputOptions;

			if (method === 'offset') {
				// Direct writing to offsets
				inputOptions = storedPanelConfig?.watchValues?.offset[refName]?.inputOptions ?? offsetMap[refName];

				if (typeof inputOptions === 'undefined') {
					Common.showError('Offset name '+ JSON.stringify(refName) +' was not found in the map.', {timeout: 6000});
					return;
				} else if (inputOptions.type === 'bits') {
					// a value that is a given bit in an offset

					// find the new value
					newValue = (currInternalValue == true ? false : true);

					offsetsData = [
						{
							name: inputOptions.address,
							value: [
								{ bit: inputOptions.bit, value: newValue },
							],
						},
					];
				} else {
					// regular offset
					if (newInternalValue != null) {
						newValue = newInternalValue;
					} else if (inputOptions?.toggleValues) {
						newValue = Common.getNextToggleValue(inputOptions.toggleValues, currInternalValue);
					} else {
						console.error('Dont know how to determine new value for offset name '+ refName + '.');
					}
					if (newValue != null) {
						newValue = Fsuipc.internalToRawConversion(aircraftPanelId, method, refName, newValue);
						offsetsData = [ {name: refName, value: newValue } ];
					}
				}

				if (offsetsData) {
					connection.sendMessage({
						command: 'offsets.write',
						name: 'aircraftOffsets',
						changesOnly: true,
						offsets: offsetsData,
					});
				}

			} else if (method === 'lVar') {
				inputOptions = storedPanelConfig?.watchValues?.lVar[refName]?.inputOptions ?? lVarOptions[refName];
				if (newInternalValue != null) {
					newValue = newInternalValue;
				} else if (inputOptions.toggleValues) {
					newValue = Common.getNextToggleValue(inputOptions.toggleValues, currInternalValue);
				} else {
					console.error('Dont know how to determine new value for lVar name '+ refName + '.');
				}
				if (newValue != null) {
					newValue = Fsuipc.internalToRawConversion(aircraftPanelId, method, refName, newValue);
					connection.sendMessage({
						command: 'vars.write',
						vars: [ {name: refName, value: newValue} ],
					});
				}

			} else if (method === 'simControl') {
				var controlName = refName;
				var controlParameter = 0;
				if (!isNaN(newInternalValue)) {
					controlParameter = newInternalValue;
				}

				connection.sendMessage({
					command: 'offsets.write',
					name: 'simControlOffsets',
					changesOnly: true,
					offsets: [
						{name: 'simControlParam', value: controlParameter},
						{name: 'simControlNumber', value: Fsuipc.msfs20ControlNameToNumber(controlName)},
					],
				});

			} else if (method === 'presetCommand') {
				if (typeof refName === 'object') {
					// Complex type where we need to determine which command to send based on what the current value is, eg.: {0: 'FNX320_LIGHT_RWY_TURNOFF_OFF', 1: 'FNX320_LIGHT_RWY_TURNOFF_ON'}
					newValue = Common.getNextToggleValue(Object.keys(refName), currInternalValue);
					if (typeof refName[newValue] !== 'undefined') {
						sendPresetCommand(refName[newValue]);
					} else {
						Common.showError('Missing present command to be sent for the internal value of '+ newValue +'. Only these are available: '+ JSON.stringify(refName));
					}
				} else {
					// Simple type where refName is just a string
					sendPresetCommand(refName);
				}

			} else if (method === 'hVar') {
				var theHVar = refName;
				connection.sendMessage({
					command: 'vars.write',
					vars: [ {name: 'H:'+ theHVar} ],
				});

			} else if (method === 'calcCode') {
				var calculatorCode = refName;
				connection.sendMessage({
					command: 'vars.calc',
					name: 'calc',
					code: calculatorCode,
				});
			}
		},

		/**
		 * Handle up/down knobs that sends commands to the sim
		 *
		 * @param {object} event The Javascript event
		 * @param {string} direction `down` or `up`
		 */
		knobUpDownClick: (event, method, refName, currInternalValue, direction, customStep, options) => {
			console.log('Knob '+ direction +': '+ method +':'+ refName);
			if (!options) options = {};

			// Play sound
			if (options.sound !== false) {
				audioObj.play();
			}

			// Handle click
			var refProps, newValue;
			if (method === 'offset') {
				refProps = storedPanelConfig?.watchValues?.offset[refName]?.inputOptions ?? offsetMap[refName];
			} else if (method === 'lVar') {
				refProps = storedPanelConfig?.watchValues?.lVar[refName]?.inputOptions ?? lVarOptions[refName];
			}

			if (typeof refProps.validValues !== 'undefined') {
				// ok
			} else if (typeof refProps.min !== 'undefined' && typeof refProps.max !== 'undefined') {
				// ok
			} else {
				Common.showError('The '+ method +' '+ refName + ' is missing its valid values for up/down changes.'); return;
			}

			// If the sim values are opposite the natural order for up/down
			if (refProps.inverseDirection) {
				if (direction == 'down') {
					direction = 'up';
				} else {
					direction = 'down';
				}
			}

			if (typeof refProps.validValues !== 'undefined') {
				newValue = Common.getNextUpDownValue(refProps.validValues, currInternalValue, direction);
			} else {
				// Range (min, max, (step))
				newValue = Common.getNextRangeValue(refProps, currInternalValue, direction, customStep);
			}
			if (newValue === null) {
				return;
			} else {
				newValue = Fsuipc.internalToRawConversion(aircraftPanelId, method, refName, newValue);
			}

			if (method === 'offset') {
				// Direct writing to offsets
				connection.sendMessage({
					command: 'offsets.write',
					name: 'aircraftOffsets',
					changesOnly: true,
					offsets: [ {name: refName, value: newValue } ],
				});
			} else if (method === 'lVar') {
				// Writing to Lvar
				connection.sendMessage({
					command: 'vars.write',
					vars: [ {name: refName, value: newValue } ],
				});
			} else {
				Common.showError('Knob up/down change for method '+ method +' has not been defined.');
			}
		},

		knobTouchSettings: {
			minMsBetweenUpdates: 100,
		},
		knobTouchRuntime: {
			mechanism: null,  //'range' (sets values within a specified range) or 'infinite' (infinite increase/decrease commands, no specific values)
			method: null,
			refName: null,
			currInternalValue: null,
			lastSetValue: null,
			stepScale: null,
			options: null,
			startPosX: null,
			startPosY: null,
			currPosX: null,
			currPosY: null,
			lastSent: null,
		},
		/**
		 * Handle start of knob touch
		 *
		 * @param {object} event The Javascript event
		 */
		knobTouchStart: (event, method, refName, currInternalValue, stepScaleOrTriggerDist, options) => {
			var self = eventHandlers;

			if (typeof refName == 'object' && typeof refName.incr !== 'undefined') {
				console.log('Knob touch start: '+ method +':'+ refName.incr +' / '+ refName.decr);
				self.knobTouchRuntime.mechanism = 'infinite';
			} else {
				console.log('Knob touch start: '+ method +':'+ refName);
				self.knobTouchRuntime.mechanism = 'range';
			}
			if (!currInternalValue) {
				currInternalValue = 0;
			}

			self.knobTouchRuntime.method = method;
			self.knobTouchRuntime.refName = refName;
			self.knobTouchRuntime.startingValue = currInternalValue;
			self.knobTouchRuntime.stepScaleOrTriggerDist = (isNaN(stepScaleOrTriggerDist) ? 1 : stepScaleOrTriggerDist);
			self.knobTouchRuntime.options = options;
			self.knobTouchRuntime.startPosX = event.touches[0].pageX;
			self.knobTouchRuntime.startPosY = event.touches[0].pageY;

			if (self.knobTouchRuntime.mechanism == 'range') {
				var refProps;
				if (method === 'offset') {
					refProps = storedPanelConfig?.watchValues?.offset[refName]?.inputOptions ?? offsetMap[refName];
				} else if (method === 'lVar') {
					refProps = storedPanelConfig?.watchValues?.lVar[refName]?.inputOptions ?? lVarOptions[refName];
				}
				if (typeof refProps.min === 'undefined' || typeof refProps.max === 'undefined') {
					Common.showError('The '+ method +' '+ refName + ' is missing its min/max values.'); return;
					self.knobTouchEnd = {};
				} else {
					self.knobTouchRuntime.min = refProps.min;
					self.knobTouchRuntime.max = refProps.max;
					self.knobTouchRuntime.step = 1;
					if (typeof refProps.step !== 'undefined') {
						self.knobTouchRuntime.step = refProps.step;
					}
				}
			}
		},

		/**
		 * Handle dragging the touch on a knob
		 *
		 * @param {object} event The Javascript event
		 */
		knobTouchMove: (event) => {
			if (!options) options = {};

			var rt = eventHandlers.knobTouchRuntime;
			var cfg = eventHandlers.knobTouchSettings;

			rt.currPosX = event.touches[0].pageX;
			rt.currPosY = event.touches[0].pageY;

			// Play sound
			try {
				if (rt.options.sound !== false) {
					audioObj.play();
				}
			} catch (e) {
				// do nothing if fails, eg. because it sees no related user event
			}

			var now = new Date().getTime();
			if (!rt.lastSent || now - rt.lastSent >= cfg.minMsBetweenUpdates) {
				rt.lastSent = now;

				// Handle move
				var distSinceStart;  //will become the distance we have moved since start (or for 'infinite' mechanism: since last time we sent a command). Will be positive for an increase, negative for decrease
				var vertDist = rt.startPosY - rt.currPosY;
				var horizDist = rt.currPosX - rt.startPosX;
				if ((vertDist > 0 && horizDist < 0) || (vertDist < 0 && horizDist > 0)) {
					// As we use the axis that we have moved the most in, there would be a conflict if one axis shows increase while the other a decrease. In that case we resolve to using the vertical axis.
					distSinceStart = vertDist;
				} else {
					// Otherwise we just use the axis with the largest distance moved
					if (vertDist > 0) {
						distSinceStart = Math.max(vertDist, horizDist);
					} else {
						distSinceStart = Math.min(vertDist, horizDist);
					}
				}

				if (rt.mechanism == 'range') {
					var stepScale = rt.stepScaleOrTriggerDist;

					var addSubtractFromCurrentValue = distSinceStart / 10 * parseFloat(stepScale);  // the fixed number is an extra scale to make the stepScale not require very small numbers for small ranges
					var newValue = rt.startingValue + addSubtractFromCurrentValue;

					// Make new value align with the step
					if (rt.step == 1) {
						newValue = Math.round(newValue);
					} else {
						var temp;
						temp = (newValue - rt.min) / rt.step;
						if (temp % 1 < 0.5) {
							temp = Math.floor(temp);  //number is closer to the step after this number
						} else {
							temp = Math.ceil(temp);  //number is closer to the step before this number
						}
						newValue = rt.min + rt.step * temp;
					}

					// Ensure it doesn't fall below or exceed min/max
					if (newValue > rt.max) {
						newValue = rt.max;
					} else if (newValue < rt.min) {
						newValue = rt.min;
					}

					if (newValue != rt.lastSetValue) {
						newValue = Fsuipc.internalToRawConversion(aircraftPanelId, rt.method, rt.refName, newValue);
						if (rt.method == 'offset') {
							connection.sendMessage({
								command: 'offsets.write',
								name: 'aircraftOffsets',
								changesOnly: true,
								offsets: [ {name: rt.refName, value: newValue } ],
							});
						} else if (rt.method == 'lVar') {
							connection.sendMessage({
								command: 'vars.write',
								vars: [ {name: rt.refName, value: newValue} ],
							});
						}

						rt.lastSetValue = newValue;
					}
				} else if (rt.mechanism == 'infinite') {
					var triggerDist = rt.stepScaleOrTriggerDist;

					if (Math.abs(distSinceStart) >= triggerDist) {
						if (distSinceStart > 0) {
							if (rt.method == 'presetCommand') {
								sendPresetCommand(rt.refName.incr);
							}
						} else {
							if (rt.method == 'presetCommand') {
								sendPresetCommand(rt.refName.decr);
							}
						}
						// Set starting position as current position so that on next move this becomes our starting point and we can again use triggerDist to determine when to send next command
						rt.startPosY = rt.currPosY;
						rt.startPosX = rt.currPosX;
					}
				}
			}
		},

		/**
		 * Handle end of knob touch
		 *
		 * @param {object} event The Javascript event
		 */
		knobTouchEnd: (event) => {
			if (eventHandlers.knobTouchRuntime.mechanism == 'range') {
				console.log('Knob touch end: '+ eventHandlers.knobTouchRuntime.method +':'+ eventHandlers.knobTouchRuntime.refName);
			} else {
				console.log('Knob touch end: '+ eventHandlers.knobTouchRuntime.method +':'+ eventHandlers.knobTouchRuntime.refName.incr +' / '+ eventHandlers.knobTouchRuntime.refName.decr);
			}
			eventHandlers.knobTouchRuntime = {};
		},

		onPanelLoad: (panelConfig) => {
			console.log('Aircraft panel initializing...');
			storedPanelConfig = panelConfig;
			connection = new FsuipcConnection( (Config && Config.fsuipcUrl ? Config.fsuipcUrl : 'ws://localhost:2048/fsuipc'), aircraftPanelId, panelConfig.watchValues, offsetMap, (method, refName, internalValue) => {
				// Convert the final value to its HTML representation
				var valueHtml;
				var vars = panelConfig.watchValues;

				if (typeof vars[method][refName] == 'string' || typeof vars[method][refName] == 'function') {  //convert shorthand to standard object
					vars[method][refName] = {
						toHtml: vars[method][refName],
					};
				}

				if (typeof vars[method][refName].toHtml == 'string') {
					// The string is the name of a method in FsuipcHtml (or UserFsuipcHtml)
					var htmlMethod = vars[method][refName].toHtml;
					if (typeof FsuipcHtml[htmlMethod] !== 'undefined') {
						valueHtml = FsuipcHtml[htmlMethod](internalValue);
					} else if (typeof UserFsuipcHtml[htmlMethod] !== 'undefined') {
						valueHtml = UserFsuipcHtml[htmlMethod](internalValue);
					} else {
						Common.showError('Failed to find method named '+ method +':'+ refName +' to convert value to HTML representation.');
					}
				} else if (typeof vars[method][refName].toHtml == 'function') {
					// A function defined directly in the aircraft panel file
					valueHtml = vars[method][refName].toHtml(internalValue);
				}

				dataStore.setStoreValue(method, refName, internalValue, valueHtml);

			}, {debug: debug});
		},
	}

	const options = {
		moduleCache: { vue: Vue },
		async getFile(url) {
			const res = await fetch(url);
			if ( !res.ok ) {
				throw Object.assign(new Error(res.statusText + ' ' + url), { res });
			}
			return {
				type: (url.endsWith('.js') ? '.mjs' : '.vue'),
				getContentData: (asBinary) => asBinary ? res.arrayBuffer() : res.text(),
			}
		},
		addStyle: (textContent) => {
			const style = Object.assign(document.createElement('style'), { textContent });
			const ref = document.head.getElementsByTagName('style')[0] || null;
			document.head.insertBefore(style, ref);
		},
		log(type, ...args) {
			console[type](...args);
		},
	}
	var panelInfo = {path: (aircraftPanelId + '-vue').split('/')};
	var app = Vue.createApp(Vue.defineAsyncComponent(() => loadModule('aircraft-panels/'+ aircraftPanelId +'.vue?_='+ new Date().getTime(), options)), {dataStore, eventHandlers, panelInfo})
	// NOT CURRENTLY USED. app.provide('appData', { offsetMap });  //used with inject() within any child component
	app.mount('#aircraft-specific-component');
}

function sendPresetCommand(commandName) {
	if (typeof presetCommands[commandName] === 'undefined') {
		Common.showError('Command "'+ commandName +'" was not found in list of preset commands. If this was a preset from MobiFlight it might have been changed or removed in place of something else. Please update /databases/MobiFlightHubHopPresets.js with the latest version and look for another preset to use in its place. Searching on https://hubhop.mobiflight.com/ might be of a help to you.', {timeout: 40000});
	} else if (presetCommands[commandName].method === 'simControl') {
		connection.sendMessage({
			command: 'offsets.write',
			name: 'simControlOffsets',
			offsets: [
				{name: 'simControlParam', value: (typeof presetCommands[commandName].parameter !== 'undefined' ? presetCommands[commandName].parameter : 0)},
				{name: 'simControlNumber', value: Fsuipc.msfs20ControlNameToNumber(presetCommands[commandName].control) },
			],
		});
	} else if (presetCommands[commandName].method === 'calcCode') {
		connection.sendMessage({
			command: 'vars.calc',
			name: 'calc',
			code: presetCommands[commandName].code,
		});
	} else {
		console.error('Dont know how to handle method '+ presetCommands[commandName].method + ' in event handler.');
	}
}

console.log('AIRCRAFT PANEL: '+ aircraftPanelId);
</script>
</head>
<body>

<!--
	<a href="#" onclick="btnGetAboutInfo(); return false;" class="btn btn-secondary btn-sm disabled only-on-connected" disabled>Read info</a>
-->
	<div id="fsuipcInfo"></div>
	<div id="fsuipcReadOffsets"></div>
	<div id="errorMessage" style="color: red; font-weight: bold; position: absolute; top: 5px; left: 5px; padding: 5px; background-color: #30383d;"></div>

	<div id="aircraft-specific-component"></div>

</body>
</html>
